/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Todos API
 * The Todos API description
 * OpenAPI spec version: 0.1
 */
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  TodoDto
} from '.././schemas'


  
  /**
 * @summary Todo„ÅÆ‰∏ÄË¶ß„ÅåËøî„Å£„Å¶„Åç„Åæ„Åô
 */
export type todoControllerFindAllResponse = {
  data: TodoDto[];
  status: number;
}

export const getTodoControllerFindAllUrl = () => {


  return `http://localhost:3000/todos`
}

export const todoControllerFindAll = async ( options?: RequestInit): Promise<todoControllerFindAllResponse> => {
  
  const res = await fetch(getTodoControllerFindAllUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getTodoControllerFindAllKey = () => [`http://localhost:3000/todos`] as const;

export type TodoControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof todoControllerFindAll>>>
export type TodoControllerFindAllQueryError = Promise<unknown>

/**
 * @summary Todo„ÅÆ‰∏ÄË¶ß„ÅåËøî„Å£„Å¶„Åç„Åæ„Åô
 */
export const useTodoControllerFindAll = <TError = Promise<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof todoControllerFindAll>>, TError> & { swrKey?: Key, enabled?: boolean }, fetch?: RequestInit }
) => {
  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getTodoControllerFindAllKey() : null);
  const swrFn = () => todoControllerFindAll(fetchOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
