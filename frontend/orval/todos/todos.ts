/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Todos API
 * The Todos API description
 * OpenAPI spec version: 0.1
 */
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  CreateTodoDto,
  TodoDto
} from '.././schemas'


  
  /**
 * @summary Todo„ÅÆ‰∏ÄË¶ß„ÅåËøî„Å£„Å¶„Åç„Åæ„Åô
 */
export type todoControllerFindAllResponse = {
  data: TodoDto[];
  status: number;
}

export const getTodoControllerFindAllUrl = () => {


  return `${process.env.NEXT_PUBLIC_API_URL}/todos`
}

export const todoControllerFindAll = async ( options?: RequestInit): Promise<todoControllerFindAllResponse> => {
  
  const res = await fetch(getTodoControllerFindAllUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getTodoControllerFindAllKey = () => [`${process.env.NEXT_PUBLIC_API_URL}/todos`] as const;

export type TodoControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof todoControllerFindAll>>>
export type TodoControllerFindAllQueryError = Promise<unknown>

/**
 * @summary Todo„ÅÆ‰∏ÄË¶ß„ÅåËøî„Å£„Å¶„Åç„Åæ„Åô
 */
export const useTodoControllerFindAll = <TError = Promise<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof todoControllerFindAll>>, TError> & { swrKey?: Key, enabled?: boolean }, fetch?: RequestInit }
) => {
  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getTodoControllerFindAllKey() : null);
  const swrFn = () => todoControllerFindAll(fetchOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Todo„ÇíËøΩÂä†„Åó„Åæ„Åô
 */
export type todoControllerCreateResponse = {
  data: TodoDto;
  status: number;
}

export const getTodoControllerCreateUrl = () => {


  return `${process.env.NEXT_PUBLIC_API_URL}/todos/create`
}

export const todoControllerCreate = async (createTodoDto: CreateTodoDto, options?: RequestInit): Promise<todoControllerCreateResponse> => {
  
  const res = await fetch(getTodoControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createTodoDto,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getTodoControllerCreateMutationFetcher = ( options?: RequestInit) => {
  return (_: Key, { arg }: { arg: CreateTodoDto }): Promise<todoControllerCreateResponse> => {
    return todoControllerCreate(arg, options);
  }
}
export const getTodoControllerCreateMutationKey = () => [`${process.env.NEXT_PUBLIC_API_URL}/todos/create`] as const;

export type TodoControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof todoControllerCreate>>>
export type TodoControllerCreateMutationError = Promise<unknown>

/**
 * @summary Todo„ÇíËøΩÂä†„Åó„Åæ„Åô
 */
export const useTodoControllerCreate = <TError = Promise<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof todoControllerCreate>>, TError, Key, CreateTodoDto, Awaited<ReturnType<typeof todoControllerCreate>>> & { swrKey?: string }, fetch?: RequestInit}
) => {

  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTodoControllerCreateMutationKey();
  const swrFn = getTodoControllerCreateMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Todo„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô
 */
export type todoControllerUpdateResponse = {
  data: TodoDto;
  status: number;
}

export const getTodoControllerUpdateUrl = () => {


  return `${process.env.NEXT_PUBLIC_API_URL}/todos/update`
}

export const todoControllerUpdate = async (todoDto: TodoDto, options?: RequestInit): Promise<todoControllerUpdateResponse> => {
  
  const res = await fetch(getTodoControllerUpdateUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      todoDto,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getTodoControllerUpdateMutationFetcher = ( options?: RequestInit) => {
  return (_: Key, { arg }: { arg: TodoDto }): Promise<todoControllerUpdateResponse> => {
    return todoControllerUpdate(arg, options);
  }
}
export const getTodoControllerUpdateMutationKey = () => [`${process.env.NEXT_PUBLIC_API_URL}/todos/update`] as const;

export type TodoControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof todoControllerUpdate>>>
export type TodoControllerUpdateMutationError = Promise<unknown>

/**
 * @summary Todo„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô
 */
export const useTodoControllerUpdate = <TError = Promise<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof todoControllerUpdate>>, TError, Key, TodoDto, Awaited<ReturnType<typeof todoControllerUpdate>>> & { swrKey?: string }, fetch?: RequestInit}
) => {

  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTodoControllerUpdateMutationKey();
  const swrFn = getTodoControllerUpdateMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Todo„ÇíÂâäÈô§„Åó„Åæ„Åô
 */
export type todoControllerDeleteResponse = {
  data: TodoDto;
  status: number;
}

export const getTodoControllerDeleteUrl = () => {


  return `${process.env.NEXT_PUBLIC_API_URL}/todos/delete`
}

export const todoControllerDelete = async (todoControllerDeleteBody: number, options?: RequestInit): Promise<todoControllerDeleteResponse> => {
  
  const res = await fetch(getTodoControllerDeleteUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      todoControllerDeleteBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getTodoControllerDeleteMutationFetcher = ( options?: RequestInit) => {
  return (_: Key, { arg }: { arg: number }): Promise<todoControllerDeleteResponse> => {
    return todoControllerDelete(arg, options);
  }
}
export const getTodoControllerDeleteMutationKey = () => [`${process.env.NEXT_PUBLIC_API_URL}/todos/delete`] as const;

export type TodoControllerDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof todoControllerDelete>>>
export type TodoControllerDeleteMutationError = Promise<unknown>

/**
 * @summary Todo„ÇíÂâäÈô§„Åó„Åæ„Åô
 */
export const useTodoControllerDelete = <TError = Promise<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof todoControllerDelete>>, TError, Key, number, Awaited<ReturnType<typeof todoControllerDelete>>> & { swrKey?: string }, fetch?: RequestInit}
) => {

  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTodoControllerDeleteMutationKey();
  const swrFn = getTodoControllerDeleteMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
